name: CI

on:
  push:

permissions:
  contents: write

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0  # Ensure full history is available for commit
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle
      - name: Run Spotless Apply
        run: ./gradlew spotlessApply --no-daemon
      - name: Commit changes if any
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          if ! git diff --cached --exit-code; then
            git commit -m "Apply code formatting with Spotless"
            git push
          fi
  build:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle
      - name: Build
        run: ./gradlew clean npmRunBuild build --no-daemon
  build-docker:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
      - name: Docker image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
